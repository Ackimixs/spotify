generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  subscribed        Boolean @default(false)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  account       Account?
  sessions      Session[]

  Playlist    Playlist[]
  likedMusics Music[]    @relation("LikedMusics")
  History     History[]
  Queue       Queue[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Music {
  id         String     @id @default(cuid())
  spotifyId  String     @unique
  name       String
  artists    Artist[]   @relation(name: "MusicArtists")
  album      Album      @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId    String
  thumbnail  String?
  previewUrl String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  likedBy    User[]     @relation("LikedMusics")
  Playlist   Playlist[] @relation("Playlist")
  History    History[]
  Queue      Queue[]
}

model Album {
  id        String   @id @default(cuid())
  spotifyId String   @unique
  name      String
  thumbnail String?
  artists   Artist[] @relation(name: "AlbumArtists")
  musics    Music[]
}

model Playlist {
  id        String   @id @default(cuid())
  spotifyId String   @unique
  name      String
  authorId  String   @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  musics    Music[]  @relation("Playlist")
}

model Artist {
  id        String  @id @default(cuid())
  spotifyId String  @unique
  name      String
  thumbnail String?
  albums    Album[] @relation(name: "AlbumArtists")
  Music     Music[] @relation(name: "MusicArtists")
}

model History {
  userId  String
  musicId String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  music   Music    @relation(fields: [musicId], references: [id], onDelete: Cascade)
  addedAt DateTime @default(now())

  @@id([userId, musicId])
}

model Queue {
  userId  String
  musicId String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  music   Music    @relation(fields: [musicId], references: [id], onDelete: Cascade)
  addedAt DateTime @default(now())

  @@id([userId, musicId])
}
